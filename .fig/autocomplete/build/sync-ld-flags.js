var g="https://app.launchdarkly.com",F="405BFF",E="3DD6F5",j="A34FDE",u="fig://template?badge=\u{1F511}",m=`fig://template?color=${E}&badge=E`,f=`fig://template?color=${j}&badge=\u2691`,O=`fig://template?color=${F}&badge=P`,h="fig://template?badge=\u{1F3F7}",b="fig://template?badge=\u{1F310}",s=(e,t)=>{let n=R(e,t);return n>-1?e[n+1]:""},R=(e,t)=>{for(let n of t.name){let o=e.indexOf(n);if(o>-1)return o}return-1},v=(e,t)=>n=>{let o=JSON.parse(n),p=[];for(let i in o)for(let d in o[i])d.toLowerCase()===e&&p.push({name:o[i][d],description:i,icon:t});return p},r={projects:{script:e=>{let t=s(e,a);return`curl -s -X GET       ${s(e,c)||g}/api/v2/projects       -H 'Authorization: ${t}'`},postProcess:e=>JSON.parse(e).items.map(n=>({name:n.key,insertValue:n.key,description:n.name,icon:O}))},environments:{script:e=>{let t=s(e,a),n=s(e,l);return`curl -s -X GET       ${s(e,c)||g}/api/v2/projects/${n}       -H 'Authorization: ${t}'`},postProcess:e=>JSON.parse(e).environments.map(n=>({name:n.key,insertValue:n.key,description:n.name,icon:`fig://template?color=${n.color}&badge=E`}))},flags:{script:e=>{let t=s(e,a),n=s(e,l),o=s(e,y)||s(e,k),p=s(e,c)||g,i=o?`env=${o}`:"";return`curl -s -X GET       ${p}/api/v2/flags/${n}?${i}       -H 'Authorization: ${t}'`},postProcess:e=>JSON.parse(e).items.map(n=>({name:n.key,insertValue:n.key,description:`${n.name} - ${n.description}`,icon:f}))},flagTags:{script:e=>{let t=s(e,a);return`curl -s -X GET       ${s(e,c)||g}/api/v2/tags?kind=flag       -H 'Authorization: ${t}'`},postProcess:e=>JSON.parse(e).items.map(n=>({name:n,icon:h}))}},l={name:["-p","--project-key"],description:"Project key",isRepeatable:!1,isRequired:!0,icon:O,priority:800,args:{name:"string",description:"Project key",debounce:!0,generators:r.projects}},a={name:["-t","--api-token"],description:"LaunchDarkly personal access token with write-level access.",isRepeatable:!1,isRequired:!0,icon:u,priority:1e3,args:{name:"string",description:"API access token",generators:{script:"cat ~/.config/ldc.json",postProcess:v("apitoken",u)}}},c={name:["-H","--host"],description:"Hostname override",isRepeatable:!1,icon:b,args:{name:"URI",description:"LaunchDarkly URI",generators:{script:"cat ~/.config/ldc.json",postProcess:v("server",b)}}},y={name:["-s","--source-env"],description:"Source environment",dependsOn:["-p"],isRepeatable:!1,isRequired:!0,icon:m,priority:700,args:{name:"string",description:"Environment key",debounce:!0,generators:r.environments}},k={name:["-d","--destination-env"],description:"Destination environment",dependsOn:["-p"],isRepeatable:!1,isRequired:!0,icon:m,priority:600,args:{name:"string",description:"Environment key",debounce:!0,generators:r.environments}},P={name:"sync-ld-flags",description:"Copy flag settings from one environment to another.",options:[{name:["-h","--help"],description:"Show help for sync-ld-flags"},l,y,k,a,{name:["-o","--omit-segments"],description:"Omit segments when syncing",isRepeatable:!1},{name:["-f","--flag"],description:"Sync only the specified flag",isRepeatable:!1,icon:f,exclusiveOn:["-T","--tag"],args:{name:"string",description:"Flag key",debounce:!0,generators:r.flags}},{name:["-T","--tag"],description:"Sync flags with the specified tag(s). Only flags with all tags will sync.",icon:h,exclusiveOn:["-f","--flag"],args:{name:"string",description:"Tag name",isVariadic:!0,debounce:!0,generators:r.flagTags}},{name:["--dry-run"],description:"Preview changes",isRepeatable:!1},c,{name:["-v","--verbose"],description:"Enable verbose logging",isRepeatable:!1},{name:["-D","--debug"],description:"Enable HTTP debugging",isRepeatable:!1}]},S=P;export{S as default};
//# sourceMappingURL=data:application/json;base64,
